<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAHAAAACkAAAAyAAAAOQAAAEAAAABFAAAARwAA
        AEkAAABLAAAASwAAAEkAAABHAAAARQAAAEAAAAA5AAAAMgAAACkAAAAcAAAACgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAC0AAABGAAAATQAAAE4AAABNAAAATQAA
        AE0AAABNAAAATQAAAE0AAABNAAAATQAAAE0AAABNAAAATQAAAE4AAABOAAAATQAAAEYAAAAtAAAAAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAABkAAAAlAAAALQAA
        ADMAAAA5AAAAPQAAAEAAAABBAAAAQwAAAEMAAABBAAAAPwAAAD0AAAA5AAAAMwAAAC0AAAAlAAAAGQAA
        AAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAMAAAAEAAAABQAAAAYAAAAGAAAABgAAAAYAAAAFAAAABAAAAAMAAAABAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOzO
        NQDqzDQA7dA2C+/QNhjw0jcb8dM4G/LTOBvu0Dcb0rcwG8+0MBvPtTAbz7QwG860MBvOtDAbzrQwG82z
        LxzMsi8ZzLEvC8atKwDJry0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADvzzYA7882Cu7QNlfu0Dev7tA32e7QN+Pu0Dfj7tA34+vNNuPRtzDjy7Ev48uxL+PLsS/jy7Ev48ux
        L+PLsS/jy7Ev48uxL9rLsS+xy7EvWMyyMArLsS8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA7tA2AO/QNQnu0DeB7tA38u7RN//v0jX/79M1/+/TNf/v0zX/79M1/9/FMv/NtS7/y7Mt/8uz
        Lf/Lsy3/y7Mt/8uzLf/Lsy3/y7Mt/8uyLv/LsS/zzLIvhM6yLwrNsi8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAPHQNQDszzcA7s82V+7QN/Lu0Tb/6sJA/96XW//YhGj/2IJp/9iCaf/Ygmn/1oFp/814
        Z//Hc2X/x3Nl/8dzZf/Hc2X/x3Nl/8dyZf/Jfl7/zag6/8uyLv/LsS/zzLEuWsuyLgDNry8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA7tA3AO7QNwvu0Dev7tE2/+rCQP/QZ3v/wzea/8Ewnv/BMJ//wTCf/8Ew
        n//BMJ//wTCf/8Iwn//CMJ//wjCf/8Iwn//CMJ//wjCf/8M0nf/UiV//0bgu/8uxL//MsS+yzrIwDM2y
        MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADuzzcA7s83GO7QN9nv0jb/3pdb/8M3mv/CNZv/xkOS/8dF
        kf/HRZH/x0WR/8dFkf/HRZH/x0WR/8dFkf/HRZH/x0WR/8dFkf/HRJH/ylGJ/+KmUv/awDH/yrAv/8ux
        L9vMsS8ZzLEvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO7QNwDu0Dcc7tA34+/TNf/YhGj/wTGe/8ZB
        lP/jqlD/6cBB/+m/Qv/pv0L/6b9C/+m/Qv/pv0L/6cBB/+nAQf/pv0L/6b9C/+m/Qv/qw0D/7s84/93B
        M//KsC//y7Ev48uxLxzLsS8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7tA3AO7QNxzu0Dfj79M1/9iC
        av/BMZ7/wzaa/9mFaP/u0Df/7tE2/+7RNv/u0Tb/7tE2/+7PN//rxD//7Mk7/+7SNv/u0Tb/7tE2/+7R
        Nv/v0Tf/3MAz/8qwL//LsS/jy7EvHMuxLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADu0DcA7tA3HO7Q
        N+Pv0zX/2IJq/8Exnv/CM53/xkKS/+OpUP/u0jb/7tA3/+7QN//tzjj/3JFg/8lPi//QZnz/6LpF/+7R
        Nv/u0Df/7tA3/+/RN//cwDP/yrAv/8uxL+PLsS8cy7EvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAO7Q
        NwDu0Dcc7tA34+/TNf/Ygmr/wTGe/8M5mf/GQZT/zl6B/+rDQP/u0Tb/7tE2/+rBQP/JTYz/wTGe/8Iy
        nf/bjGP/79M1/+7QN//u0Df/79E3/9zAM//KsC//y7Ev48uxLxzLsS8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA7tA3AO7QNxzu0Dfj79M1/9iCav/BMJ//x0WR/9mFZ//FPpb/2INp/+7QN//u0Tf/3I9h/8M4
        mf/BM5z/wTGe/85egP/pwUH/7tI2/+7QN//v0Tf/3MAz/8qwL//LsS/jy7EvHMuxLwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADv0T0A79E+HO7RPOPv0zb/2IJp/8Ewn//HRpH/57lG/9Nxdf/GQpP/139s/9iA
        av/GQ5L/z2B//9uKZP/We27/xT+V/9NxdP/syDz/7tE3/+/RN//dwTP/yrEv/8uxL+PLsS8cy7EvAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPLcawDy3G0c8tto4/HZUP/Ygmz/wTCf/8dFkf/qwUH/5rRJ/8ZC
        k//BMp3/wTKd/8xZhP/ovET/79Q0/+3OOP/Zg2j/xDyX/9iEaf/tzTn/79E3/+PGNf/Msy//y7Ev48ux
        LxzLsS8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA895zAPPecxzz3nTj9OBu/9mGe//BMJ7/x0WR/+nA
        Qf/rxD//yk+L/8Exnv/CMp3/2opk/+/TNf/u0Df/7tE3/+zIPP/UcnT/xT2W/92UXv/u0Tb/7tE1/97C
        M//RtzHjzrQwHM+1MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADz3nMA895zHPPec+P04XD/2oiF/8Ew
        nv/HRZH/6b9C/+7PN//ckGD/yU+L/9BmfP/oukb/7tE2/+7QN//u0Df/7tE2/+rCQf/PY37/x0WR/9d+
        bP/hoVX/7Ms6/+vONuPqzTYc6s02AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPecwDz3XAc89944/jt
        o//dj6H/wS+d/8dFkf/pv0L/7tE2/+3OOP/qwz//68g8/+7QN//u0Df/7tA3/+7QN//u0Df/7tI2/+Wy
        S//GQ5L/wTGe/8U/lf/goFb/79I24+7QNxzu0DcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA895zAPLc
        ahz04oPj/v7t/+CZzP/BL5v/x0WR/+m/Qv/u0Tb/7tA3/+7RNv/u0Tb/7tA3/+7QN//u0Df/7tA3/+7Q
        N//u0Tb/6sM//8pPiv/BMZ7/wjOd/9uNYv/v0zXj7tA3HO7QNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADz3nMA8txqHPTihOP///H/4ZrP/8Evm//HRZH/6b9C/+7RNv/u0Df/7tA3/+7QN//u0Df/7tA3/+7Q
        N//u0Df/7tA3/+7QN//tzjj/3JBg/8lPi//QZnz/6LpF/+7RNuPu0Dcc7tA3AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAPLdcQDx22gZ9OGB2/796v/hm8//wC6b/8dFkf/pv0L/7tE2/+7QN//u0Df/7tA3/+7Q
        N//u0Df/7tA3/+7QN//u0Df/7tA3/+7QN//tzjj/6sM//+vIPP/u0Df/7tA32O7PNhjuzzYAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA891rAPLbYAz033a0/PXL/+/J5P/NWKT/1HRz/+zJOv/u0Tb/7tA2/+7Q
        Nv/u0Df/7tA3/+7QN//u0Df/7tA3/+7QN//u0Df/7tA3/+7QN//u0Tb/7tE2/+7QN//u0Deu7dA2C+3Q
        NgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD32WMA8OB6APLca1v25ZP0/Pjo//bjxv/v0mP/8NdU//DX
        Vf/w11X/8NZQ/+/SQP/u0Df/7tA3/+7QN//u0Df/7tA3/+7QN//u0Df/7tA3/+7QN//u0Df/7tA38u7Q
        Nlfs0DkA8dAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADy22sA8dplCvLdcIj15Y/09eaR//Pf
        dP/z3nT/8950//PedP/z3nP/8ttl/+/SQP/u0Df/7tA3/+7QN//u0Df/7tA3/+7QN//u0Df/7tA3/+7Q
        N/Pu0DeB7882Ce7QNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADy3GkA8ttoDPPd
        bF3z3W+3895y3PPec+Pz3nPj895z4/Pec+Pz3nPj8NZQ4+7QNuPu0Dfj7tA34+7QN+Pu0Dfj7tA34+7Q
        N9nu0Dev7s82V+/PNgrvzzYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADu2WIA7NdcAfHbaQ7y3XAa895zHPPecxzz3nMc895zHPPedBzw11Uc7tA2HO7QNxzu0Dcc7tA3HO7Q
        Nxzu0Dcc7s83GO7PNwvqzTsA7M45AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/AAAP/gAAB/8AAA//8AD//8AAP/8AAA/+AAAH/gAAB/wAAAP8AAAD/AA
        AA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP+AAAH/gA
        AB/8AAA//gAA//////////////////////8=
</value>
  </data>
</root>